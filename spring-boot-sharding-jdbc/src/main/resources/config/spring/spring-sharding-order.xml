<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.dangdang.com/schema/ddframe/rdb http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">  
          
      
    <!-- 配置好dataSourceRulue,即对数据源进行管理 -->  
    <bean id="dataSourceRuleTable" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">  
        <constructor-arg>  
            <map>  
                <entry key="sharding_0" value-ref="sharding_0"/>  
            </map>  
        </constructor-arg>  
    </bean>  
         
      <!-- 对t_order表的配置，进行分库配置，逻辑表名为t_order，库有实际的三张表 -->  
    <bean id="orderTableRuleTable" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">  
        <constructor-arg value="t_order" index="0"/>  
        <constructor-arg index="1">  
            <list>  
                <value>t_order_0</value>  
                <value>t_order_1</value>  
                <value>t_order_2</value>  
            </list>  
        </constructor-arg>  
        <constructor-arg index="2" ref="dataSourceRuleTable"/>  
        <constructor-arg index="3" ref="orderTableShardingStrategy"/>  
    </bean>  
      
    <!-- t_order 分表策略 -->  
    <bean id="orderTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">  
        <constructor-arg index="0" value="order_id"/>  
        <constructor-arg index="1">  
            <bean class="com.lwl.boot.sharding.jdbc.algorithm.OrderSingleKeyTableShardingAlgorithm" />  
        </constructor-arg>  
    </bean>  
      
    <!-- 构成分库分表的规则 传入数据源集合和每个表的分库分表的具体规则 -->  
    <bean id="shardingRuleTable" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">  
        <constructor-arg index="0" ref="dataSourceRuleTable"/>  
        <constructor-arg index="1">  
            <list>  
                <ref bean="orderTableRuleTable"/>  
            </list>  
        </constructor-arg>  
    </bean>  
      
    <!-- 对datasource进行封装 -->  
    <bean id="shardingDataSourceTable" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">  
        <constructor-arg ref="shardingRuleTable"/>  
    </bean>  
  
    <!-- 事务 -->  
    <bean id="transactionManagerTable"  
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="shardingDataSourceTable" />  
    </bean>  
  
    <tx:annotation-driven transaction-manager="transactionManagerTable" />  
          
  
</beans>  